
Relatório – Trabalho 1

Aluno:  Matrícula:

1) Objetivo

Implementar um TAD para representar uma lista encadeada que controla a prioridade de atendimento na emergência de um hospital.
Regras de prioridade:

Vermelha (1) — maior prioridade;
Amarela (2);
Verde (3) — menor prioridade.

A ordenação da lista deve obedecer: primeiro a cor (1,2,3) e, em caso de empate na cor, a ordem de chegada.
O programa deve permitir inserções, remoções por atendimento ou desistência e exibir, para cada saída, a lista atual e
as quantidades por cor no formato 'vermelha-X, amarela-Y, verde-Z'.

2) Estrutura do programa

Arquivos que acompanham o trabalho:

lista.h — definição do TAD e protótipos.
lista.c — implementação do TAD.
main.c — programa principal que lê 'entrada.txt' e usa o TAD.
entrada.txt — arquivo de teste conforme o enunciado.

Breve descrição das funções principais (no TAD):

Paciente (struct): contém id, cor, e prox.
cria_lista_vazia() — retorna NULL (lista vazia).
insere_ordenado(lista, id, cor) — insere mantendo ordem por cor e id.
remove_por_id(lista, id) — remove nó com id informado.
busca_por_id(lista, id) — retorna ponteiro para nó (ou NULL).
imprime_lista(lista) — imprime a lista no formato id - Cor (uma linha por paciente).
imprime_contagens(lista) — imprime vermelha-x, amarela-y, verde-z.
libera_lista(lista) — libera memória.

3) Solução

1. Defini o TAD Paciente.
2. A inserção é feita ordenada: se o novo paciente tem cor melhor  que o primeiro, insere no início;
caso contrário percorre a lista até achar a posição correta (mantendo ordem por cor e, em empate, por id crescente).
3. A remoção localiza o paciente pelo id e ajusta ponteiros para retirar o nó, liberando memória.
4. A cada operação o programa imprime a lista atual e, em seguida, a linha de contagens no formato pedido.
5. O main lê o arquivo entrada.txt  para simular os eventos do enunciado.


4) Arquivo de entrada

Conteúdo (exatamente conforme enunciado — cores: 1=vermelha, 2=amarela, 3=verde):

c 1 3
c 2 1
c 3 3
c 4 2
c 5 1
c 6 1
c 7 3
c 8 1
a 5
a 4
c 9 3
c 10 2
c 11 1
c 12 2
a 2
a 6
r 3
f

6) Saída do programa 

a) Após chegadas 1..8 — Lista gerada computacionalmente:

2 - Vermelha
5 - Vermelha
6 - Vermelha
8 - Vermelha
4 - Amarela
1 - Verde
3 - Verde
7 - Verde
vermelha-4, amarela-1, verde-3

b) paciente atendido: 5 - Vermelha
Lista atualizada:

2 - Vermelha
6 - Vermelha
8 - Vermelha
4 - Amarela
1 - Verde
3 - Verde
7 - Verde
vermelha-3, amarela-1, verde-3

c) paciente atendido: 4 - Amarela
Lista atualizada:

2 - Vermelha
6 - Vermelha
8 - Vermelha
1 - Verde
3 - Verde
7 - Verde
vermelha-3, amarela-0, verde-3

d) chegada de novos pacientes 9,10,11,12
Lista atualizada:

2 - Vermelha
6 - Vermelha
8 - Vermelha
11 - Vermelha
10 - Amarela
12 - Amarela
1 - Verde
3 - Verde
7 - Verde
9 - Verde
vermelha-4, amarela-2, verde-4

e) próximos pacientes atendidos: 2 e 6
Lista atualizada:

8 - Vermelha
11 - Vermelha
10 - Amarela
12 - Amarela
1 - Verde
3 - Verde
7 - Verde
9 - Verde
vermelha-2, amarela-2, verde-4


f) paciente 3 (verde) desiste
g) Lista atualizada:

8 - Vermelha
11 - Vermelha
10 - Amarela
12 - Amarela
1 - Verde
7 - Verde
9 - Verde
vermelha-2, amarela-2, verde-3

Observação: as saídas acima seguem o exemplo do enunciado e incluem, logo abaixo de cada lista, a linha com as quantidades no formato exigido (`vermelha-X, amarela-Y, verde-Z`).

7) Observações e conclusões

O que funcionou: Inserção ordenada, remoção por atendimento ou desistência, impressão da lista e contagens conforme enunciado. Memória liberada ao final.
Dificuldades: Cuidar das condições de inserção ordenada (manter ordem por cor e id) e do ajuste correto de ponteiros na remoção sem vazamento.
Facilidade: Implementação com lista simplesmente encadeada é suficiente e direta para este problema; evita reordenar lista inteira a cada operação.
Limitações / o que não foi feito: O programa assume entrada bem-formada. Há uma pequena saída de “não encontrado” se um id inválido for pedido para remoção/atendimento — isso não aparece no teste do enunciado, é apenas tratamento defensivo.

8) Como compilar e rodar

No terminal, na pasta com os 3 arquivos:

gcc main.c lista.c -o hospital
./hospital < entrada.txt
